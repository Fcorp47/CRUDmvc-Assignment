@model Assignment.Models.Employee
@{
    ViewBag.Title = "Create";


}




<link href="~/Content/themes/base/jquery-ui.min.css" rel="stylesheet" />




    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

<div class="form-horizontal">
    <center><h4>Employee Register Form</h4></center>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2"})
        <div class="col-md-10">
           
            @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", @id = "nosymbol" } })
            @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
        </div>
    </div>



    <div class="form-group">
        @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", @id = "lastnamesymbol" } })
            @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
        </div>
    </div>



    <div class="form-group">
        @Html.LabelFor(model => model.Designation, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">


            @Html.RadioButtonFor(model => model.Designation, "Jr. Developer") Jr. Developer<br />
            @Html.RadioButtonFor(model => model.Designation, "Sr. Developer") Sr. Developer<br />
            @Html.RadioButtonFor(model => model.Designation, "Team Lead") Team Lead<br />
            @Html.RadioButtonFor(model => model.Designation, "Project Lead") Project Lead<br />


            @Html.ValidationMessageFor(model => model.Designation, "", new { @class = "text-danger" })
        </div>
    </div>





    <div class="form-group">
        @Html.LabelFor(model => model.Department, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">

            @if (ViewBag.Model == null)
            {
                @Html.HiddenFor(m => m.Department, new { Value = "NA" })
            }
            else
            {
                @Html.DropDownListFor(model => model.Department, new SelectList(ViewBag.Model as SelectList, "Value", "Text"), "--Select--", new { @class = "form-control" })
            }



            @Html.ValidationMessageFor(model => model.Department, "", new { @class = "text-danger" })
        </div>
    </div>




    <div class="form-group">
        @Html.LabelFor(model => model.Knowledge, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">


            @Html.DropDownListFor(model => model.Knowledge, new List<SelectListItem>
          {

              new SelectListItem{ Text="MVC", Value="MVC"},
              new SelectListItem{ Text="VB", Value="VB"},
              new SelectListItem{ Text="SQL", Value="SQL"},
              new SelectListItem{ Text="Jquery", Value="Jquery"},
              new SelectListItem{ Text="JavaScript", Value="JavaScript"},
              new SelectListItem{ Text="AngularJS", Value="AngularJS"},
              new SelectListItem{ Text="NodeJS", Value="NodeJS"}

          }, new { @class = "form-control" })



            @*@Html.DropDownList("KID", ViewBag.Model as SelectList, "Select Knowledge", new { @class = "form-control" })*@

            @Html.ValidationMessageFor(model => model.Knowledge, "", new { @class = "text-danger" })

        </div>
    </div>



    <div class="form-group">
        @Html.LabelFor(model => model.Salary, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Salary, new { htmlAttributes = new { @class = "form-control", @id = "numberonly" } })
         
            @Html.ValidationMessageFor(model => model.Salary, "", new { @class = "text-danger" })
        </div>
    </div>




    <div class="form-group">
        @Html.LabelFor(model => model.JoinDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">

            @Html.EditorFor(model => model.JoinDate, new { htmlAttributes = new { @class = "datepicker" } })

            @Html.ValidationMessageFor(model => model.JoinDate, "", new { @class = "text-danger" })
        </div>
    </div>









    <div class="form-group">
        @Html.LabelFor(model => model.Report_person, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">

            @{

                // bool isEmpty = isEmpty(ViewBag.Emodel);

            }

            @if (ViewBag.EModel == null)
            {
        
                @Html.HiddenFor(m => m.Report_person == "NA", new { Value = "NA" })
            }
            else
            {
                @Html.DropDownListFor(model => model.Report_person, new SelectList(ViewBag.EModel as SelectList, "Value", "Text"), "--Select--", new { @class = "form-control" })

            }

            @Html.ValidationMessageFor(model => model.Report_person, "", new { @class = "text-danger" })
        </div>
    </div>






    @*@Html.DropDownList("DID", ViewBag.Model as SelectList, "Select Mobile", new { htmlAttributes = new { @class = "form-control", @id = "deptID" } })*@

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Create" class="btn btn-default" />
        </div>
    </div>
</div>
    }

    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>

    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")

        <script src="~/Scripts/jquery-ui-1.13.2.min.js"></script>

        <script>
            $(function () {
                $(".datepicker").datepicker({

                    dateFormat: "dd/mm/yy"

                });
            });


            
            $(document).ready(function () {
                $('#numberonly').keypress(function (e) {
                    var charCode = (e.which) ? e.which : event.keyCode
                    if (String.fromCharCode(charCode).match(/[^0-9\.]/g))
                        return false;
                });

            });

            /*/[^0-9]/g*/

            $('#nosymbol').on('keypress', function (event) {
                var regex = new RegExp("^[a-zA-Z0-9]+$");
                var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);
                if (!regex.test(key)) {
                    event.preventDefault();
                    return false;
                }
            });

            $('#lastnamesymbol').on('keypress', function (event) {
                var regex = new RegExp("^[a-zA-Z0-9]+$");
                var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);
                if (!regex.test(key)) {
                    event.preventDefault();
                    return false;
                }
            });
            
            



            

        </script>
    }
